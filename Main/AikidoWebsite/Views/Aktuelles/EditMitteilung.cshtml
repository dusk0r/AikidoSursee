@{
    ViewBag.Title = "Mitteilung Hinzufügen";
}

<mitteilung-edit></mitteilung-edit>

<hr /><hr />

<style type="text/css">
    .creole-input {
        width: 800px;
        height: 400px;
        border: 1px solid lightgrey;
        resize: none;
    }

    .creole-preview {
        border: 1px dotted red;
        padding: 3px;
    }
</style>



@*@section Footer {
    <script type="text/javascript">
        var viewModel = new ViewModel(Html.Raw(Json.Encode(Model)));
        var viewModel = new ViewModel(@Html.Raw(JsonExtensions.Serialize(Model)));

        function Datei(data) {
            var self = this;

            self.Id = data.Id;
            self.Bezeichnung = ko.observable(data.Bezeichnung || "unbenannt");
            self.DateiName = data.DateiName;
            self.Size = data.Size;

            self.link = ko.computed(function () { return "/Content/File/" + self.Id });
            self.removeLink = function (mitteilung) { return "/Aktuelles/DeleteFile?mitteilungsId=" + mitteilung().Id().replace("/","_") + "&fileId=" + self.Id; };
            self.sizeText = getSizeString();

            function getSizeString() {
                if (self.Size < 1024) {
                    return self.Size + " Byte";
                } else if (self.Size < (1024 * 1024)) {
                    var kilo = self.Size / 1024;
                    return Math.round(kilo * 10) / 10 + " kiB";
                } else {
                    var mega = self.Size / 1024 * 1024;
                    return Math.round(mega * 10) / 10 + " MiB";
                }
            }
        }

        function Mitteilung(data) {
            var self = this;

            self.Id = ko.observable(data.Id || null);
            self.Titel = ko.observable(data.Titel || "");
            self.Text = ko.observable(data.Text || "");
            self.Publikum = ko.observable(data.Publikum || 1);

            self.Titel.subscribe(function () { viewModel.isDirty(true); });
            self.Text.subscribe(function () { viewModel.isDirty(true); });
            self.Publikum.subscribe(function () { viewModel.isDirty(true); });
        }

        function Termin(data) {
            var self = this;

            if (!data) {
                data = { Id: null, Titel: "" };
            }

            self.Id = ko.observable(data.Id);
            self.Titel = ko.observable(data.Titel);
            self.StartDatum = ko.observable(moment(data.StartDatum).toDate());
            self.EndDatum = ko.observable(moment(data.EndDatum).toDate());
            self.Ort = ko.observable(data.Ort);
            self.Text = ko.observable(data.Text);

            self.startDatumString = ko.computed({
                read: function () {
                    return moment(self.StartDatum()).format("DD.MM.YYYY HH:mm");
                },
                write: function (value) {
                    //self.startDatum(moment(value).toDate());
                    self.StartDatum(moment(value, "DD.MM.YYYY HH:mm").toDate());
                }
            });

            self.endDatumString = ko.computed({
                read: function () {
                    return moment(self.EndDatum()).format("DD.MM.YYYY HH:mm");
                },
                write: function (value) {
                    self.EndDatum(moment(value, "DD.MM.YYYY HH:mm").toDate());
                }
            });

            self.Titel.subscribe(function () { viewModel.isDirty(true); });
            self.StartDatum.subscribe(function () { viewModel.isDirty(true); });
            self.EndDatum.subscribe(function () { viewModel.isDirty(true); });
            self.Ort.subscribe(function () { viewModel.isDirty(true); });
            self.Text.subscribe(function () { viewModel.isDirty(true); });
        }

        function ViewModel(model) {
            var self = this;

            self.WithTermin = ko.observable(false);
            self.Mitteilung = ko.observable(new Mitteilung(model.Mitteilung));
            self.Termine = ko.observableArray(model.Termine.map(function (termin) { return new Termin(termin); }));
            self.Dateien = ko.observableArray(model.Dateien.map(function (datei) { return new Datei(datei); }));
            self.isDirty = ko.observable(false);

            self.save = function () {
                $.ajax("/Aktuelles/EditNews", {
                    type: "POST",
                    data: ko.toJSON(viewModel),
                    contentType: "application/json;charset=utf8",
                    dataType: "json",
                    success: function (message, status, jqXHR) {
                        //if (self.Mitteilung().Id() === null) {
                        //    window.location = "/Aktuelles/EditNews/" + message.Id.replace("/", "_");
                        //}

                        //alert(message.Message);
                        window.location = "/Aktuelles";

                    },
                    error: function (jqXHR) {
                        alert("Irgendwas ist schief gegangen");
                    }
                });

            };

            self.discard = function () {
                window.location = "/Aktuelles";
            };

            self.remove = function () {
                if (confirm("Mitteilung löschen?")) {
                    window.location = "/Aktuelles/RemoveNews/" + self.Mitteilung().Id().replace("/", "_");
                }
            };

            self.addTermin = function () {
                self.Termine.push(new Termin());

                $(".datetimepicker").datetimepicker({
                    language: 'pt-BR'
                });
            };
        }

        ko.applyBindings(viewModel);
        viewModel.isDirty(false);

        $(function () {
            // Creole Preview aktivieren
            var input = document.getElementById("creole-input");
            var preview = document.getElementById("creole-preview");
            var creole = new Parse.Simple.Creole({
                forIE: document.all,
                interwiki: {},
                linkFormat: ''
            });

            var render = function () {
                preview.innerHTML = "";
                creole.parse(preview, input.value);
            };

            input.onkeyup = function () { render(); }

            render();
        });
    </script>
}*@
