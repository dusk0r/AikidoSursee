@model AikidoWebsite.Web.Models.EditMitteilungModel
@{
    ViewBag.Title = "AddNews";
}

<style type="text/css">
    .creole-input {
        width: 800px;
        height: 400px;
        border: 1px solid lightgrey;
        resize: none;
    }

    .creole-preview {
        border: 1px dotted red;
        padding: 3px;
    }
</style>

<h2>Mitteilung hinzufügen:</h2>

<div class="btn-group">
<a href="#" class="btn btn-primary" data-bind="click: save, css: { disabled: !isDirty() }">Speichern</a>
<a href="#" class="btn btn-primary" data-bind="click: discard, css: { disabled: !isDirty() }">Verwerfen</a>
<a href="#" class="btn btn-primary" data-bind="click: remove, css: { disabled: Mitteilung().Id() === null }">Löschen</a>
</div>

<br /><br />

<!-- ko with: Mitteilung -->
    <div class="control-group" data-bind="css: { error: Titel().length < 1 }">
        <label class="control-label"><h4>Titel</h4></label>
        <div class="controls">
            <input type="text" size="30" class="span10" data-bind="value: Titel, valueUpdate:'afterkeydown'" />
        </div>
    </div>
    <div class="control-group" data-bind="css: { error: Text().length < 1 }">
        <label class="control-label"><h4>Text</h4></label>

        <ul class="nav nav-tabs">
            <li class="active"><a href="#text" data-toggle="tab">Bearbeiten</a></li>
            <li><a href="#vorschau" data-toggle="tab">Vorschau</a></li>
            <li><a href="#currentV" data-toggle="tab">Aktuelle Version</a></li>
            <li><a href="#creole" data-toggle="tab">Creole Hilfe</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" id="text">
                <div class="controls">
                    <textarea class="span10" rows="5" id="creole-input" data-bind="value: Text, valueUpdate: 'afterkeydown'"></textarea>
                </div>
            </div>
            <div class="tab-pane" id="vorschau">
                <div id="creole-preview" class="creole-preview"></div>
            </div>
            <div class="tab-pane" id="currentV">
                <div class="creole-preview">
                    @Html.Raw(Model.Mitteilung.Html)
                </div>
            </div>
            <div class="tab-pane" id="creole">
                @Html.Partial("CreoleHelp")
            </div>
        </div>

        <br />

    </div>
    <div class="control-group">
        <label class="control-label"><h4>Publikum</h4></label>
        <div class="controls">
            @Html.PublikumDropDown("publikum", "value: Publikum")
        </div>
    </div>
<!-- /ko -->

<div data-bind="visible: $root.Mitteilung().Id() != null">
    <h4>Dateien</h4>

    <span data-bind="visible: $root.Dateien().length <= 0">
        <i>Keine Dateien</i>
    </span>

    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Bezeichnung</th>
                <th>Datei Name</th>
                <th>Grösse</th>
            </tr>
        </thead>
        <tbody>
            <!-- ko foreach: Dateien -->
            <tr>
                <td></td>
                <td>
                    <a href="#" data-bind="text: Bezeichnung, attr: { href: link }"></a>
                </td>
                <td>
                    <span data-bind="text: DateiName"></span>
                </td>
                <td>
                    <span data-bind="text: sizeText"></span>
                </td>
            </tr>

            <!-- /ko -->
        </tbody>
    </table>

    @using (Html.BeginForm("UploadFile", "Aktuelles", FormMethod.Post, new { enctype = "multipart/form-data" })) {
        <input type="file" name="file" />
        <input type="text" name="bezeichnung" />
        <input type="submit" value="hinzufügen" />
        <input type="hidden" name="mitteilungsId" value="@Model.Mitteilung.Id" />
    }
</div>

<h4>Termine</h4>


<table class="table">
    <thead>
        <tr>
            <th style="width: 220px">Titel</th>
            <th style="width: 170px">Start</th>
            <th style="width: 170px">Ende</th>
            <th>Text</th>
        </tr>
    </thead>
    <tbody>
        <!-- ko foreach: Termine -->
        <tr>
            <td>
                <input type="text" data-bind="value: Titel" placeholder="Neuer Termin" />
            </td>
            <td>
@*                <input style="width: 120px;" type="datetime" data-bind="value: startDatumString" />*@
                <div class="well">
                    <div class="input-append date datetimepicker" data-bind="datetimepicker: StartDatum">
                        <input data-format="dd.MM.yyyy hh:mm:ss" type="text" style="width: 150px" />
                        <span class="add-on">
                            <i data-time-icon="icon-time" data-date-icon="icon-calendar"></i>
                        </span>
                    </div>
                </div>
            </td>
            <td>
@*                <input style="width: 120px;" type="datetime" data-bind="value: endDatumString" />*@
                <div class="well">
                    <div class="input-append date datetimepicker" data-bind="datetimepicker: EndDatum">
                        <input data-format="dd.MM.yyyy hh:mm:ss" type="text" style="width: 150px" />
                        <span class="add-on">
                            <i data-time-icon="icon-time" data-date-icon="icon-calendar"></i>
                        </span>
                    </div>
                </div>
            </td>
            <td>
                <textarea rows="2" data-bind="value: Text" style="min-width: 300px"></textarea>
            </td>
        </tr>
        <!-- /ko -->

    </tbody>
</table>

<a class="btn" data-bind="click: addTermin">Termin hinzufügen</a>

@section Footer {
    <script type="text/javascript">
        var viewModel = new ViewModel(@Html.Raw(Json.Encode(Model)));

        function Datei(data) {
            var self = this;

            self.Id = data.Id;
            self.Bezeichnung = data.Bezeichnung || "unbenannt";
            self.DateiName = data.DateiName;
            self.Size = data.Size;

            self.link = ko.computed(function () { return "/Content/File/" + self.Id });
            self.sizeText = getSizeString();

            function getSizeString() {
                if (self.Size < 1024) {
                    return self.Size + " Byte";
                } else if (self.Size < (1024 * 1024)) {
                    var kilo = self.Size / 1024;
                    return Math.round(kilo * 10) / 10 + " kiB";
                } else {
                    var mega = self.Size / 1024 * 1024;
                    return Math.round(mega * 10) / 10 + " MiB";
                }
            }
        }

        function Mitteilung(data) {
            var self = this;

            self.Id = ko.observable(data.Id || null);
            self.Titel = ko.observable(data.Titel || "");
            self.Text = ko.observable(data.Text || "");
            self.Publikum = ko.observable(data.Publikum || 1);

            self.Titel.subscribe(function () { viewModel.isDirty(true); });
            self.Text.subscribe(function () { viewModel.isDirty(true); });
            self.Publikum.subscribe(function () { viewModel.isDirty(true); });
        }

        function Termin(data) {
            var self = this;

            if (!data) {
                data = { Id: null, Titel: "" };
            }

            self.Id = ko.observable(data.Id);
            self.Titel = ko.observable(data.Titel);
            self.StartDatum = ko.observable(moment(data.StartDatum).toDate());
            self.EndDatum = ko.observable(moment(data.EndDatum).toDate());
            self.Ort = ko.observable(data.Ort);
            self.Text = ko.observable(data.Text);

            self.startDatumString = ko.computed({
                read: function () {
                    return moment(self.StartDatum()).format("DD.MM.YYYY HH:mm");
                },
                write: function (value) {
                    //self.startDatum(moment(value).toDate());
                    self.StartDatum(moment(value, "DD.MM.YYYY HH:mm").toDate());
                }
            });

            self.endDatumString = ko.computed({
                read: function () {
                    return moment(self.EndDatum()).format("DD.MM.YYYY HH:mm");
                },
                write: function (value) {
                    self.EndDatum(moment(value, "DD.MM.YYYY HH:mm").toDate());
                }
            });

            self.Titel.subscribe(function () { viewModel.isDirty(true); });
            self.StartDatum.subscribe(function () { viewModel.isDirty(true); });
            self.EndDatum.subscribe(function () { viewModel.isDirty(true); });
            self.Ort.subscribe(function () { viewModel.isDirty(true); });
            self.Text.subscribe(function () { viewModel.isDirty(true); });
        }

        function ViewModel(model) {
            var self = this;

            self.WithTermin = ko.observable(false);
            self.Mitteilung = ko.observable(new Mitteilung(model.Mitteilung));
            self.Termine = ko.observableArray(model.Termine.map(function (termin) { return new Termin(termin); }));
            self.Dateien = ko.observableArray(model.Dateien.map(function (datei) { return new Datei(datei); }));
            self.isDirty = ko.observable(false);

            self.save = function () {
                $.ajax("/Aktuelles/EditNews", {
                    type: "POST",
                    data: ko.toJSON(viewModel),
                    contentType: "application/json;charset=utf8",
                    dataType: "json",
                    success: function (message, status, jqXHR) {
                        //if (self.Mitteilung().Id() === null) {
                        //    window.location = "/Aktuelles/EditNews/" + message.Id.replace("/", "_");
                        //}

                        //alert(message.Message);
                        window.location = "/Aktuelles";

                    },
                    error: function (jqXHR) {
                        alert("Irgendwas ist schief gegangen");
                    }
                });

            };

            self.discard = function () {
                window.location = "/Aktuelles";
            };

            self.remove = function () {
                if (confirm("Mitteilung löschen?")) {
                    window.location = "/Aktuelles/RemoveNews/" + self.Mitteilung().Id().replace("/", "_");
                }
            };

            self.addTermin = function () {
                self.Termine.push(new Termin());

                $(".datetimepicker").datetimepicker({
                    language: 'pt-BR'
                });
            };
        }

        ko.applyBindings(viewModel);
        viewModel.isDirty(false);

        $(function () {
            // Creole Preview aktivieren
            var input = document.getElementById("creole-input");
            var preview = document.getElementById("creole-preview");
            var creole = new Parse.Simple.Creole({
                forIE: document.all,
                interwiki: {},
                linkFormat: ''
            });

            var render = function () {
                preview.innerHTML = "";
                creole.parse(preview, input.value);
            };

            input.onkeyup = function () { render(); }

            render();
        });
    </script>
}
